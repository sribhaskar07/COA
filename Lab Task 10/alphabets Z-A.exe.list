EMU8086 GENERATED LISTING. MACHINE CODE <- SOURCE.
 
alphabets Z-A.exe -- emu8086 assembler version: 4.08  
 
[ 11/5/2024  --  2:29:13 PM ] 
 
===================================================================================================
[LINE]     LOC: MACHINE CODE                          SOURCE
===================================================================================================
 
[   1]        :                                       .model small
[   2]        :                                       .stack 100h
[   3]        :                                       .data
[   4]        :                                       
[   5]        :                                       .code
[   6]    0100:                                       main proc
[   7]    0100: B8 10 00                              mov ax, @data      ; Initialize data segment
[   8]    0103: 8E D8                                 mov ds, ax
[   9]        :                                       
[  10]    0105: B9 1A 00                              mov cx, 26         ; Set loop counter to 26 for letters Z to A
[  11]    0108: B2 5A                                 mov dl, 'Z'        ; Start with ASCII character 'Z'
[  12]        :                                       
[  13]    010A:                                       print_loop:
[  14]    010A: B4 02                                 mov ah, 2          ; Function to display character in DOS
[  15]    010C: CD 21                                 int 21h            ; Interrupt to print character in DL
[  16]        :                                       
[  17]    010E: FE CA                                 dec dl             ; Move to the previous character (Z to A)
[  18]    0110: E2 F8                                 loop print_loop    ; Decrement CX and loop until CX = 0
[  19]        :                                       
[  20]    0112: B4 4C                                 mov ah, 4Ch        ; Exit to DOS
[  21]    0114: CD 21                                 int 21h
[  22]        :                                       main endp
[  23]        :                                       end main
[  24]        :                                       
 
===================================================================================================
 
EXE HEADER - bytes from 0000 to 01FF inclusive.

0000: 4D      -   exe signature (M)
0001: 5A      -   exe signature (Z)
0002: 16      -   bytes on last page (l.byte)
0003: 01      -   bytes on last page (h.byte)
0004: 02      -   512 byte pages in file (l.byte)
0005: 00      -   512 byte pages in file (h.byte)
0006: 01      -   relocations (l.byte)
0007: 00      -   relocations (h.byte)
0008: 20      -   paragraphs in header (l.byte)
0009: 00      -   paragraphs in header (h.byte)
000A: 00      -   minimum memory (l.byte)
000B: 00      -   minimum memory (h.byte)
000C: FF      -   maximum memory (l.byte)
000D: FF      -   maximum memory (h.byte)
000E: 00      -   SS - stack segment (l.byte)
000F: 00      -   SS - stack segment (h.byte)
0010: 00      -   SP - stack pointer (l.byte)
0011: 01      -   SP - stack pointer (h.byte)
0012: FC      -   check sum (l.byte)
0013: 6E      -   check sum (h.byte)
0014: 00      -   IP - instruction pointer (l.byte)
0015: 00      -   IP - instruction pointer (h.byte)
0016: 10      -   CS - code segment (l.byte)
0017: 00      -   CS - code segment (h.byte)
0018: 1E      -   relocation table adress (l.byte)
0019: 00      -   relocation table adress (h.byte)
001A: 00      -   overlay number (l.byte)
001B: 00      -   overlay number (h.byte)
001C: 01      -   signature (l.byte)
001D: 00      -   signature (h.byte)
001E: 01      -   relocation table - offset inside segment (l.byte)
001F: 00      -   relocation table - offset inside segment (h.byte)
0020: 10      -   relocation table - segment anchor (l.byte)
0021: 00      -   relocation table - segment anchor (h.byte)
0022 to 01FF  -   reserved relocation area  (00) 




===================================================================================================
