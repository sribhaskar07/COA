EMU8086 GENERATED LISTING. MACHINE CODE <- SOURCE.
 
factorial of a number 0-9.exe -- emu8086 assembler version: 4.08  
 
[ 07-11-2024  --  10:55:42 ] 
 
===================================================================================================
[LINE]     LOC: MACHINE CODE                          SOURCE
===================================================================================================
 
[   1]        :                                       .MODEL SMALL
[   2]        :                                       .STACK 100H
[   3]        :                                       .DATA
[   4]    0100: 45 6E 74 65 72 20 61 20 73 69 6E 67   msg db 'Enter a single-digit number (0-9): $'    ; Prompt message for input
                6C 65 2D 64 69 67 69 74 20 6E 75 6D 
                62 65 72 20 28 30 2D 39 29 3A 20 24 
                                                    
[   5]    0124: 0D 0A 46 61 63 74 6F 72 69 61 6C 3A   result_msg db 0Dh, 0Ah, 'Factorial: $'           ; Message to display the result
                20 24                               
[   6]    0132: 30 30 30 30 30 24 0D 0A               result db '00000$', 0Dh, 0Ah                     ; Space to store factorial result as a string
[   7]    013A: 00                                    num db ?                                         ; Variable to store the input number
[   8]    013B: 01 00                                 fact dw 1                                        ; Variable to store the factorial result
[   9]        :                                       
[  10]        :                                       .CODE
[  11]    0140:                                       main:
[  12]        :                                       ; Initialize data segment
[  13]    0140: B8 10 00                              mov ax, @data
[  14]    0143: 8E D8                                 mov ds, ax
[  15]        :                                       
[  16]        :                                       ; Display prompt message
[  17]    0145: B4 09                                 mov ah, 09h
[  18]    0147: BA 00 00                              lea dx, msg
[  19]    014A: CD 21                                 int 21h
[  20]        :                                       
[  21]        :                                       ; Take single-digit input from user
[  22]    014C: B4 01                                 mov ah, 01h
[  23]    014E: CD 21                                 int 21h
[  24]    0150: 2C 30                                 sub al, '0'                ; Convert ASCII to integer
[  25]    0152: A2 3A 00                              mov num, al                ; Store user input in 'num'
[  26]        :                                       
[  27]        :                                       ; Initialize factorial calculation
[  28]    0155: A0 3A 00                              mov al, num
[  29]    0158: B4 00                                 mov ah, 0                  ; Clear AH to extend AL to AX
[  30]    015A: 8B C8                                 mov cx, ax                 ; Move AX to CX (counter)
[  31]    015C: B8 01 00                              mov ax, 1                  ; Initialize AX to 1 (factorial result)
[  32]        :                                       
[  33]    015F:                                       factorial_loop:
[  34]    015F: 83 F9 01                              cmp cx, 1                  ; Compare CX to 1
[  35]    0162: 74 04                                 je end_factorial_loop      ; If CX is 1, end the loop
[  36]    0164: F7 E1                                 mul cx                     ; Multiply AX by CX
[  37]    0166: E2 F7                                 loop factorial_loop        ; Decrement CX and repeat the loop
[  38]        :                                       
[  39]    0168:                                       end_factorial_loop:
[  40]        :                                       ; Store the factorial result in 'fact'
[  41]    0168: A3 3B 00                              mov fact, ax
[  42]        :                                       
[  43]    016B:                                       display_factorial:
[  44]        :                                       ; Display result message
[  45]    016B: B4 09                                 mov ah, 09h
[  46]    016D: BA 24 00                              lea dx, result_msg
[  47]    0170: CD 21                                 int 21h
[  48]        :                                       
[  49]        :                                       ; Convert the factorial result to ASCII
[  50]    0172: A1 3B 00                              mov ax, fact
[  51]    0175: B9 0A 00                              mov cx, 10                 ; Prepare divisor (10) for unpacking digits
[  52]    0178: BF 36 00                              lea di, result + 4         ; Start storing result from the end
[  53]        :                                       
[  54]    017B:                                       convert_to_ascii:
[  55]    017B: 33 D2                                 xor dx, dx                 ; Clear DX for division
[  56]    017D: F7 F1                                 div cx                     ; AX = AX / 10, DX = remainder (last digit)
[  57]    017F: 80 C2 30                              add dl, '0'                ; Convert remainder to ASCII
[  58]    0182: 88 15                                 mov [di], dl               ; Store ASCII character in result
[  59]    0184: 4F                                    dec di                     ; Move to the next character position
[  60]    0185: 3D 00 00                              cmp ax, 0                  ; Check if quotient is zero
[  61]    0188: 75 F1                                 jne convert_to_ascii       ; Repeat if there are more digits
[  62]        :                                       
[  63]        :                                       ; Display the factorial result
[  64]    018A: BA 32 00                              lea dx, result
[  65]    018D: B4 09                                 mov ah, 09h
[  66]    018F: CD 21                                 int 21h
[  67]        :                                       
[  68]        :                                       ; End the program
[  69]    0191: B4 4C                                 mov ah, 4Ch
[  70]    0193: CD 21                                 int 21h
[  71]        :                                       
[  72]        :                                       end main
[  73]        :                                       
 
===================================================================================================
 
EXE HEADER - bytes from 0000 to 01FF inclusive.

0000: 4D      -   exe signature (M)
0001: 5A      -   exe signature (Z)
0002: 95      -   bytes on last page (l.byte)
0003: 01      -   bytes on last page (h.byte)
0004: 02      -   512 byte pages in file (l.byte)
0005: 00      -   512 byte pages in file (h.byte)
0006: 01      -   relocations (l.byte)
0007: 00      -   relocations (h.byte)
0008: 20      -   paragraphs in header (l.byte)
0009: 00      -   paragraphs in header (h.byte)
000A: 00      -   minimum memory (l.byte)
000B: 00      -   minimum memory (h.byte)
000C: FF      -   maximum memory (l.byte)
000D: FF      -   maximum memory (h.byte)
000E: 00      -   SS - stack segment (l.byte)
000F: 00      -   SS - stack segment (h.byte)
0010: 00      -   SP - stack pointer (l.byte)
0011: 01      -   SP - stack pointer (h.byte)
0012: C8      -   check sum (l.byte)
0013: 49      -   check sum (h.byte)
0014: 00      -   IP - instruction pointer (l.byte)
0015: 00      -   IP - instruction pointer (h.byte)
0016: 14      -   CS - code segment (l.byte)
0017: 00      -   CS - code segment (h.byte)
0018: 1E      -   relocation table adress (l.byte)
0019: 00      -   relocation table adress (h.byte)
001A: 00      -   overlay number (l.byte)
001B: 00      -   overlay number (h.byte)
001C: 01      -   signature (l.byte)
001D: 00      -   signature (h.byte)
001E: 01      -   relocation table - offset inside segment (l.byte)
001F: 00      -   relocation table - offset inside segment (h.byte)
0020: 14      -   relocation table - segment anchor (l.byte)
0021: 00      -   relocation table - segment anchor (h.byte)
0022 to 01FF  -   reserved relocation area  (00) 




===================================================================================================
